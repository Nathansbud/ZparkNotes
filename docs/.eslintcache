[{"/Users/zackamiton/Code/ZparkNotes/docs/src/index.tsx":"1","/Users/zackamiton/Code/ZparkNotes/docs/src/App.tsx":"2","/Users/zackamiton/Code/ZparkNotes/docs/src/hooks/useKeyPress.tsx":"3"},{"size":223,"mtime":1615162698984,"results":"4","hashOfConfig":"5"},{"size":3724,"mtime":1615162655512,"results":"6","hashOfConfig":"5"},{"size":998,"mtime":1615156332859,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"h0avuo",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"/Users/zackamiton/Code/ZparkNotes/docs/src/index.tsx",["16"],"/Users/zackamiton/Code/ZparkNotes/docs/src/App.tsx",["17"],"/Users/zackamiton/Code/ZparkNotes/docs/src/hooks/useKeyPress.tsx",["18"],"import { useState, useEffect } from 'react';\n\n// Hook\nfunction useKeyPress(targetKey: string) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }: KeyboardEvent) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n    // If released key is our target key then set to false\n  const upHandler = ({ key }: KeyboardEvent) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]); // rerun the effect if the targetKey changes\n\n  return keyPressed;\n}\n\nexport default useKeyPress;",["19","20"],{"ruleId":"21","severity":2,"message":"22","line":7,"column":10,"nodeType":"23","endLine":7,"endColumn":16},{"ruleId":"24","severity":1,"message":"25","line":85,"column":8,"nodeType":"26","endLine":85,"endColumn":44,"suggestions":"27"},{"ruleId":"24","severity":1,"message":"28","line":31,"column":6,"nodeType":"26","endLine":31,"endColumn":17,"suggestions":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},"react/jsx-no-undef","'Helmet' is not defined.","JSXIdentifier","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentIdx' and 'seenIdxs'. Either include them or remove the dependency array. You can also do a functional update 'setSeenIdxs(s => ...)' if you only need 'seenIdxs' in the 'setSeenIdxs' call.","ArrayExpression",["34"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["35"],"no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},{"desc":"40","fix":"41"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [sheetUrl, zparkNotes, spacePressed, seenIdxs, currentIdx]",{"range":"42","text":"43"},"Update the dependencies array to be: [downHandler, targetKey, upHandler]",{"range":"44","text":"45"},[2796,2832],"[sheetUrl, zparkNotes, spacePressed, seenIdxs, currentIdx]",[887,898],"[downHandler, targetKey, upHandler]"]